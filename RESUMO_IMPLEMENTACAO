# Sistema de Monitorização Oceânica – Resumo da Implementação

## Descrição Geral

Este projeto consiste num sistema distribuído de monitorização oceânica implementado em **C#**, baseado em **comunicação via sockets TCP**. O sistema está dividido em três aplicações principais, ligadas hierarquicamente:

WAVY <--> AGREGADOR <--> SERVIDOR

Cada componente comunica **apenas com o vizinho hierárquico direto**, segundo um protocolo estruturado e definido. O sistema suporta **múltiplas boias (WAVYs)** em simultâneo e está preparado para funcionamento contínuo.

---

## Arquitetura e Componentes

### 1. WavyApp (Boia)

Simula uma boia equipada com sensores ambientais. Ao iniciar:

- Estabelece ligação TCP com o Agregador (porta 5000).
- Envia:
  - `HELLO;<id>` para identificação.
  - `REGISTER;<sensores>` com a lista dos sensores simulados.
  - `DATA;<sensor>;<valor>` com leituras regulares (1s).
- Encerra com `BYE`.

Sensores simulados:
- Temperatura da água (°C)
- Salinidade (PSU)
- Altura de onda (m)
- Velocidade do vento (km/h)

---

### 2. AggregatorApp

Atua como intermediário entre as WAVYs e o Servidor.

- **Porta 5000**: Recebe ligações de várias WAVYs.
- **Porta 6000**: Liga-se ao Servidor.

#### Funções principais:

- Responde a mensagens das WAVYs com `ACK`, `ERROR`, `BYE_ACK`.
- Encaminha `DATA` para o Servidor no formato:

  `FORWARD;AGG_DATA;WAVY_ID;TIPO;VALOR`

- Guarda em memória:
  - Lista de WAVYs conectadas.
  - Últimos valores de cada sensor por WAVY.

#### Comandos recebidos do Servidor:

- **LIST** → Devolve lista das WAVYs ativas.
- **STATS;TIPO** → Responde com o último valor recebido por cada WAVY para esse sensor.
- **RESET** → Limpa todos os dados em memória.

---

### 3. ServerApp

Responsável pelo armazenamento final dos dados.

- Escuta na **porta 6000**.
- Recebe mensagens do tipo `FORWARD;AGG_DATA;...`.

#### Funções principais:

- Grava todas as mensagens recebidas em `logs/dados_registados.txt`, com timestamp.
- Envia `RECEIVED` ao Agregador após cada gravação.
- Permite introdução manual de comandos via consola (`LIST`, `STATS;TIPO`, `RESET`) e mostra resposta do Agregador no terminal.

---

## Fluxo de Funcionamento

1. WAVY liga-se → envia `HELLO` e `REGISTER`.
2. Começa a gerar e enviar dados `DATA` a cada 1 segundo.
3. AGREGADOR processa os dados e envia para o SERVIDOR.
4. SERVIDOR grava os dados no log e responde com `RECEIVED`.
5. Comandos enviados do SERVIDOR para o AGREGADOR produzem respostas imediatas (`LIST_RESPONSE`, `STATS_RESPONSE`, `RESET_DONE`).

---

## Funcionalidades Implementadas

| Passo | Descrição | Estado |
|------|-----------|--------|
| 1 | Comunicação base WAVY ↔ AGREGADOR (`HELLO`, `REGISTER`, `DATA`, `BYE`) | ✅ |
| 2 | Geração de dados automática e contínua | ✅ |
| 3 | Encaminhamento dos dados para o SERVIDOR | ✅ |
| 4 | Gravação dos dados no SERVIDOR | ✅ |
| 5 | Suporte a múltiplas WAVYs em simultâneo | ✅ |
| 6 | Implementação do protocolo completo com validação e ACKs | ✅ |
| 7 | Comandos do SERVIDOR (`LIST`, `STATS`, `RESET`) | ✅ |

---

## Tecnologias Utilizadas

- Linguagem: **C#**
- IDE: **Visual Studio 2022**
- Comunicação: **TCP (Sockets)**
- Controlo de versão: **Git + GitHub**

---

## Organização dos Projetos

A solução está dividida em:

- `WavyApp/` – Projeto base para boias.
- `WavyApp2/`, `WavyApp3/`, ... – Instâncias adicionais para simular múltiplas WAVYs.
- `AggregatorApp/` – Agregador que gere boias e comunica com o Servidor.
- `ServerApp/` – Componente central que regista e processa os dados.

---

Fase 2 — Comunicação com RabbitMQ + Dashboard Web

1. RabbitMQ como middleware de mensagens
O AggregatorApp publica mensagens JSON (com dados processados via gRPC) numa fila RabbitMQ chamada sensor_data.

A biblioteca usada foi RabbitMQ.Client.

As mensagens têm este formato:

{
  "wavy_id": "WAVY_001",
  "sensor": "Temperatura",
  "value": "21.3",
  "timestamp": "2025-05-28T17:00:00Z"
}

---

2. ConsumerApp
Aplicação separada que atua como consumidor das mensagens da fila.

Processa os dados recebidos em tempo real e faz inserção numa base de dados SQL Server.

Os dados são inseridos na tabela SensorReadings.

---

3. Base de Dados SQL Server
A base de dados chama-se SensorDB.

A tabela principal (SensorReadings) guarda os dados recebidos em tempo real:

CREATE TABLE SensorReadings (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    WavyId NVARCHAR(50),
    Sensor NVARCHAR(50),
    Value NVARCHAR(50),
    Timestamp DATETIME
);

---

4. Dashboard Web (ASP.NET Core MVC)
Criado projeto web com ASP.NET MVC.

Conectado à base de dados com SqlConnection.

No DashboardController, os dados são lidos com o SensorService e apresentados numa View HTML.

A página abre em https://localhost:7098/Dashboard.
